<?php if (!defined('BASEPATH')) exit('No direct script access allowed');class Step2 extends Controller {	function Step2()	{		parent::Controller();					$this->load->library('validation');	}		function _initialize() {		//Unfortunately, we can't put the below code in the constructor since		//$this isn't fully initialized yet in the constructor (for some reason).		$this->load->helper('checkpoint');			//We check if st-config.php file exists		check_installed();				//Check if config file directory is writable		check_config_writable();				//Check if previous steps completed		check_step1_completed();	}		//We don't need to remap here since we are using traditional	//URI format.		function index() {		$this->_initialize();				//Display install page		$this->_prep_form();		$this->validation->wikipath = $this->detect_site_url(); //Try to detect and set URL		$this->load->view('step2');		}		function check_config_writable() {		if(!is_writable(ABSPATH.'st-external/'))		{			error_directory_writable();		}	}		function check_step1_completed() {		if($this->session->userdata('step1_completed') === TRUE) 		{			//return true; //Let the next return handle success for both.		}		else		{			error_no_step('1');		}				if(file_exists(ABSPATH.'st-external/st-config.temp.php'))		{			return true;		}		else		{			error_no_config_temp();		}				return false;	}		function _prep_form() {		$this->validation->set_error_delimiters('<div class="error">', '</div>');				//Set validation rules		//Note we should also validate that the name does not already exist!		$rules['wikiname'] = 'required|trim|max_length[200]';		$rules['wikipath'] = 'required|trim|max_length[250]|callback_url_check|xss_clean'; 		$this->validation->set_rules($rules);				//Also repopulate the form		$fields['wikiname'] = 'Site/Wiki Name';		$fields['wikipath'] = 'Site/Wiki Full URL';		$fields['submit'] = 'Continue Button'; 		$this->validation->set_fields($fields);	}		function url_check($in_url) {		if(preg_match('%^.+://.+\..+/$%', $in_url))		{			return true;		}				$this->validation->set_message('url_check', 'There is a problem with the url you entered in the %s field. Please double check it!');		return false;	}		function detect_site_url() {		//Create a list of possible URLs		$possible_urls[] = 'http://'.$_SERVER['HTTP_HOST'].$_SERVER['PHP_SELF'];		$possible_urls[] = 'http://'.$_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI'];				$base_site_url = '';		foreach($possible_urls as $each_url)		{			if(preg_match('%(http://.+/)st-system/install/index.php.*%', $each_url, $matches))			{				$base_site_url = $matches[1];				break;			}		}				return $base_site_url;	}		function check() {		$this->_initialize();		$this->_prep_form();				if ($this->validation->run() == FALSE)		{			$this->load->view('step2');		}		else		{				//More validation on wikipath and wikiname?					//We first write the URL Path to the config file			$this->_add_url_to_config_file($this->validation->wikipath);						//Now we can import the SQL schema			$this->load->helper('loaddb');			$db_info = load_db();						//Now we import SQL Schema.			$this->load->helper('string');			$this->_import_sql_schema($db_info, $this->validation->wikiname);						//NOTE: We don't move config file over until EVERYTHING is successfully			//      completed.									//Set step2 completed			$this->session->set_userdata('step2_completed', true);						//Everything is good, so we move on to step 3:			header('Location: index.php?step3'); //We have to use this method of redirecting.		}	}		function _add_url_to_config_file($in_url) {	    			$config_sample_file = @file_get_contents(ABSPATH.'st-external/st-config.temp.php');			if($config_sample_file === FALSE)			{				error_no_step1();			}						//Set search and replaces			$search[] = 'http://yoursite.com/'; $replace[] = $in_url;				$config_sample_file = str_replace($search, $replace, $config_sample_file);						if(!file_put_contents(ABSPATH.'st-external/st-config.temp.php', $config_sample_file))			{				error_directory_writable();			}	}		function _import_sql_schema($db_info, $wiki_name) {			// Define schema info		$available_dbms = array(			'mysql'=> array(				'LABEL'			=> 'MySQL',				'SCHEMA'		=> 'mysql', 				'DELIM'			=> ';',				'DELIM_BASIC'	=> ';',				'COMMENTS'		=> 'remove_remarks'				)			);			$dbms_schema = ABSPATH.'st-system/install/sql/'.$db_info['dbdriver'].'_schema.sql';				$remove_remarks = $available_dbms[$db_info['dbdriver']]['COMMENTS'];		$delimiter = $available_dbms[$db_info['dbdriver']]['DELIM']; 		$delimiter_basic = $available_dbms[$db_info['dbdriver']]['DELIM_BASIC']; 				$this->load->helper('sqlparse'); //phpBB's DB schema cleaning library		$sql_query = @file_get_contents($dbms_schema);		if($sql_query === FALSE)		{			error_no_dbschema(basename($dbms_schema));		}				//Set up table prefix		$sql_query = str_replace('st_', $db_info['dbprefix'], $sql_query);				//Clean up SQL file		$sql_query = remove_remarks($sql_query);				//Get SQL statements		$sql_query = split_sql_file($sql_query, $delimiter);				//Add Options				//$sql_query[] = 'INSERT INTO `'.$db_info['dbprefix']."_config` VALUES (1, 'root_page', 'HomePage', 'string', 'string', 'Default Page', 'The page that is displayed when no page is specified.')";		//$sql_query[] = 'INSERT INTO `'.$db_info['dbprefix']."_config` VALUES (2, 'use_theme', 'supple', 'string', 'text', 'Use Theme', 'The theme used to display pages')";	  $sql_query[] = 'INSERT INTO `'.$db_info['dbprefix'].ST_CONFIG_TABLE."` VALUES (0, 'site_name', ".$this->db->escape($wiki_name).", 'string', 'text', 'Wiki Site Name', 'A title for your wiki')";				//We also want to generate and insert admin user. We do this in step 3.		//$sql_query[] = 'INSERT INTO `'.$db_info['dbprefix']."users` VALUES (NULL, 'admin', 'uid', '1', '')";		//$sql_query[] = 'INSERT INTO `'.$db_info['dbprefix']."users` VALUES (NULL, 'admin', 'password', '1', '')";			//Execute queries		$is_error = false;		for ($i = 0; $i < count($sql_query); $i++) 		{			if (trim($sql_query[$i]) != '') 		  {			  $result = $this->db->query($sql_query[$i]);			    				if($result===FALSE) //Error in query				{					$is_error = true;				}			}		}				//Check if an error occured		if($is_error)		{			error_import_schema();		}		}}?>